plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
	id 'com.palantir.docker' version '0.19.0'
	id 'no.nils.wsdl2java' version '0.10'
}

group = 'com.cloudera'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '12'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springBootAdminVersion', "2.1.5")
	set('springCloudVersion', "Greenwich.SR2")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'de.codecentric:spring-boot-admin-starter-client'
	implementation 'de.codecentric:spring-boot-admin-starter-server'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.0'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.session:spring-session-jdbc'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//mapstruct
	implementation "org.mapstruct:mapstruct:1.3.0.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

	// wsdl
	implementation 'no.nils:wsdl2java:0.10'
	wsdl2java 'com.sun.xml.bind:jaxb-xjc:2.3.0.1'
	wsdl2java 'javax.xml.bind:jaxb-api:2.3.1'
	wsdl2java 'javax.xml.ws:jaxws-api:2.3.1'
	wsdl2java 'org.apache.cxf:cxf-rt-wsdl:3.2.7'
	wsdl2java 'javax.jws:javax.jws-api:1.1'
	implementation 'com.sun.xml.bind:jaxb-xjc:2.3.0.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'javax.xml.ws:jaxws-api:2.3.1'
	implementation 'org.apache.cxf:cxf-rt-wsdl:3.2.7'
	implementation 'javax.jws:javax.jws-api:1.1'
	compile 'org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.11.0'
	wsdl2java 'org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.11.0'
	wsdl2java 'org.jvnet.jaxb2_commons:jaxb2-basics:0.11.0'
	implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:3.3.3'
	implementation 'org.apache.cxf:cxf-rt-transports-http:3.3.3'
	implementation 'org.apache.cxf:cxf-rt-transports-http-jetty:3.3.3'
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}

wsdl2javaExt {
	cxfVersion = "3.3.2"
}

wsdl2java{
	generatedWsdlDir = file("${projectDir}/src/main/wsdl")
	wsdlDir=file("${projectDir}/src/main/resources/wsdl/")
	wsdlsToGenerate = [
			[file("${projectDir}/src/main/resources/wsdl/arfolyamok.asmx.xml")]
	]
}

test {
	outputs.dir snippetsDir
}

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}
docker {
	name "horadla23/stockcalculator"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}
